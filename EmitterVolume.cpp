/** @file *//********************************************************************************************************

                                                  EmitterVolume.cpp

                                            Copyright 2003, John J. Bolton
    --------------------------------------------------------------------------------------------------------------

    $Header: //depot/Libraries/Confetti/EmitterVolume.cpp#9 $

    $NoKeywords: $

********************************************************************************************************************/

#include "PrecompiledHeaders.h"

#include "EmitterVolume.h"

namespace Confetti
{
/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//!
//! @param	seed	Initial seed

EmitterVolume::EmitterVolume(unsigned int seed)
    : m_Rng(seed)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterVolume::~EmitterVolume()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//!
//! @param	seed	Initial seed (not used)

EmitterPoint::EmitterPoint(unsigned int seed)
    : EmitterVolume(seed)
{
}

EmitterPoint::~EmitterPoint()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	size	Length of the line segment.

EmitterLine::EmitterLine(unsigned int seed, float size)
    : EmitterVolume(seed),
    m_Size(size)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterLine::~EmitterLine()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterLine::Next() const
{
    float const x = m_Rng.Get(m_Size) - m_Size * 0.5f;

    return D3DXVECTOR3(x, 0.0f, 0.0f);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	size	Width and height of the rectangle.

EmitterRectangle::EmitterRectangle(unsigned int seed, D3DXVECTOR2 const & size)
    : EmitterVolume(seed),
    m_Size(size)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterRectangle::~EmitterRectangle()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterRectangle::Next() const
{
    float const x = m_Rng.Get(m_Size.x) - m_Size.x * 0.5f;
    float const z = m_Rng.Get(m_Size.y) - m_Size.y * 0.5f;

    return D3DXVECTOR3(x, 0.0f, z);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	radius	Radius of the circle.

EmitterCircle::EmitterCircle(unsigned int seed, float radius)
    : EmitterVolume(seed),
    m_Radius(radius)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterCircle::~EmitterCircle()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterCircle::Next() const
{
    // Source: http://mathworld.wolfram.com/DiskPointPicking.html

    float const a = m_Rng.Get(float(Math::TWO_PI));
    float const r = m_Radius * sqrtf(m_Rng.Get());
    float       c, s;

    Math::fsincos(a, &s, &c);

    return D3DXVECTOR3(c * r, s * r, 0.0f);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	radius	radius of the sphere.

EmitterSphere::EmitterSphere(unsigned int seed, float radius)
    : EmitterVolume(seed),
    m_Radius(radius)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterSphere::~EmitterSphere()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterSphere::Next() const
{
    // Source: http://mathworld.wolfram.com/SpherePointPicking.html
    //
    // u = R(-1,1)
    // v = R(-1,1)
    // t = a * u
    // f = acos( b / (PI/2) * v )
    // v = [ cos(f) * cos(t), sin(f), cos(f) * sin(t) ]
    // v = [ cos(f) * cos(t), sqrt(1.-cos(f)*cos(f)), cos(f) * sin(t) ]
    // ct = cos(t)
    // st = sin(t)
    // cf = cos(f) = b / (PI/2) * v
    // sf = sin(f) = sqrt( 1. - cf*cf )
    // v = [ cf * ct, sf, cf * st ]

    float const t = m_Rng.Get(float(-Math::PI), float(Math::PI));
    float const cf = m_Rng.Get(-1, 1);
    float const sf = sqrtf(1.0f - cf * cf);
    float const r = m_Radius * powf(m_Rng.Get(), 1.0f / 3.0f);
    float       st, ct;

    Math::fsincos(t, &st, &ct);

    return D3DXVECTOR3(cf * ct * r, sf * r, cf * st * r);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	size	Width, height, and depth of the box.

EmitterBox::EmitterBox(unsigned int seed, D3DXVECTOR3 const & size)
    : EmitterVolume(seed),
    m_Size(size)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterBox::~EmitterBox()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterBox::Next() const
{
    float const x = m_Rng.Get(m_Size.x) - m_Size.x * 0.5f;
    float const y = m_Rng.Get(m_Size.y) - m_Size.y * 0.5f;
    float const z = m_Rng.Get(m_Size.z) - m_Size.z * 0.5f;

    return D3DXVECTOR3(x, y, z);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	radius	Radius of the cylinder.
//! @param	height	Height of the cylinder.

EmitterCylinder::EmitterCylinder(unsigned int seed, float radius, float height)
    : EmitterVolume(seed),
    m_Radius(radius),
    m_Height(height)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterCylinder::~EmitterCylinder()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterCylinder::Next() const
{
    float const a = m_Rng.Get(float(Math::TWO_PI));
    float const h = m_Rng.Get(m_Height);
    float const r = m_Radius * sqrtf(m_Rng.Get());
    float       c, s;

    Math::fsincos(a, &s, &c);

    return D3DXVECTOR3(c * r, s * r, h);
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @param	seed	Initial seed.
//! @param	radius	Radius of the cone at the base.
//! @param	height	Height of the cone.

EmitterCone::EmitterCone(unsigned int seed, float radius, float height)
    : EmitterVolume(seed),
    m_Radius(radius),
    m_Height(height)
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

EmitterCone::~EmitterCone()
{
}

/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

D3DXVECTOR3 EmitterCone::Next() const
{
    float const a = m_Rng.Get(float(Math::TWO_PI));
    float       h = m_Rng.Get();
    float       r = m_Rng.Get();
    float       c, s;

    Math::fsincos(a, &s, &c);

    h = powf(h, 1.0f / 3.0f) * m_Height;
    r = sqrtf(r) / m_Radius * h;

    return D3DXVECTOR3(c * r, s * r, h);
}
} // namespace Confetti
